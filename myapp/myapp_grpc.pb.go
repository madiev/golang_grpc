// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/myapp.proto

package myapp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MyApp_Sum_FullMethodName = "/myapp.MyApp/Sum"
)

// MyAppClient is the client API for MyApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyAppClient interface {
	Sum(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
}

type myAppClient struct {
	cc grpc.ClientConnInterface
}

func NewMyAppClient(cc grpc.ClientConnInterface) MyAppClient {
	return &myAppClient{cc}
}

func (c *myAppClient) Sum(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, MyApp_Sum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyAppServer is the server API for MyApp service.
// All implementations must embed UnimplementedMyAppServer
// for forward compatibility
type MyAppServer interface {
	Sum(context.Context, *AddRequest) (*AddResponse, error)
	mustEmbedUnimplementedMyAppServer()
}

// UnimplementedMyAppServer must be embedded to have forward compatible implementations.
type UnimplementedMyAppServer struct {
}

func (UnimplementedMyAppServer) Sum(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedMyAppServer) mustEmbedUnimplementedMyAppServer() {}

// UnsafeMyAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyAppServer will
// result in compilation errors.
type UnsafeMyAppServer interface {
	mustEmbedUnimplementedMyAppServer()
}

func RegisterMyAppServer(s grpc.ServiceRegistrar, srv MyAppServer) {
	s.RegisterService(&MyApp_ServiceDesc, srv)
}

func _MyApp_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyAppServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyApp_Sum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyAppServer).Sum(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MyApp_ServiceDesc is the grpc.ServiceDesc for MyApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myapp.MyApp",
	HandlerType: (*MyAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _MyApp_Sum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/myapp.proto",
}
